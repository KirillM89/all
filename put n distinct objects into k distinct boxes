#include <vector>
#include <queue>
#include <unordered_set>
#include <unordered_map>
#include <iostream>

using namespace std;
using vvi = vector<vector<int>>;
using vvvi = vector<vvi>;
using qvvi = queue<vvi>;



vvi empt = {};

void phelp(vector<int>& nums, int n, int i,vector<int>& cur, vvi & res, int key)
{   /*returns all samples of k elements (for each k in [1,n] if key==0 or for only k=n if key==1) from nums*/
	int cs = cur.size();

	if (key == 0)
	{
		if (cs > 0 && cs <= n)
		{
			res.push_back(cur);
		}
		if (cs > n) return;
	}
	else
	{
		if (cs== n)
		{
			res.push_back(cur);
			return;
		}
	}
	for (int j = i; j < nums.size(); ++j)
	{  
		cur.push_back(nums[j]);
		phelp(nums, n, j + 1,cur,res,key);
		cur.pop_back();
	}

}

vvvi placements(vector<int>& nums, vector<vector<int>>& ds, int n)
{
	/*nums - initial vector, ds -vector of already created groups, n -total number of groups to place
	  returns vector of groups { grp1,grp2,...} prefix of each group is ds and size of each group is ds.size()+1 */

	unordered_set<int> els;
	for (auto& el : ds)
	{
		for (auto& el_ : el) els.insert(el_);
	}
	int ng_left = n - ds.size() - 1; //remaining number of groups after this call
	int nn=nums.size() - els.size() - ng_left;
	vector<int> val_nums;
	for (auto& num : nums)
	{
		if (els.find(num)== els.end())
		{
			val_nums.push_back(num);
		}

	}
	vector<int> cur;
	vvi res;
	vvvi sol;
	if (ng_left==0) phelp(val_nums, nn, 0, cur, res, 1);
	else phelp(val_nums, nn, 0, cur, res, 0);

	for (int i=0;i<res.size();++i)
	{
		ds.push_back(res[i]);
		sol.push_back(ds);
		ds.pop_back();
	}
	return sol;

}

vvvi plc(vector<int> nums, int n)
{   
	if (n == 0) return {};
	int ns = nums.size();
	if (n > ns) return {};
	vvvi init = placements(nums, empt, n);	
	qvvi q;
	vvvi res;
	for (auto& el : init) q.push(el);
	int i = 0;
	while (!q.empty())
	{
		vvi group = q.front();
		q.pop();
		if (group.size() == n)
		{
			res.push_back(group);
			continue;
		}
		vvvi group_ = placements(nums, group, n);
		for (auto& el : group_) q.push(el);

	}
	return res;
}


int fact(int n)
{  
	if (n == 1)
	{
		return 1;
	}
	return n * fact(n - 1);	
}

int main()
{
	/*int n,ng;
	cin >> n>>ng;
	vector<int> nums(n, 0);
	for (int i = 0; i < n; ++i) cin >> nums[i];*/
	vector<int> nums = { 1,2,3,4,5,6,7,8,9,10};
	cout << fact(nums.size())<<endl;
	
	vvvi res = plc(nums, 3);
	cout << res.size() << endl;
	int i = 1;
	for (auto& vc1 : res)
	{
		cout << "case #" <<i<< endl;
		for (auto& vc2 : vc1)
		{
			for (auto& el : vc2) cout << el << " ";
			cout << endl;
		}
		++i;


	}

}
